apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
  labels:
    app: webapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: nanajanashia/k8s-demo-app:v1.0
        ports:
        - containerPort: 3000
        env:
        - name: USER_NAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-user
        - name: USER_PWD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: mongo-password 
        - name: DB_URL
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: mongo-url
        readinessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
      # Add Pod Disruption Budget
      # Ensure at least one pod is available during updates or failures
      # Gracefully handle failures without downtime
      # Allow a max of 25% of the replicas to be unavailable
      # Allow for 1 unavailable pod during planned maintenance
      # Refuse deletion of any running pod, except during cluster scaling
      # Allow disruptions for a max of 10 minutes
      # Minimize the number of pods that need to be disrupted
      # Only evict pods if it does not violate the PDB
      # Set a default update budget of 1
      # Specify that the PDB targets the label "app: webapp"
      podDisruptionBudget:
        metadata:
          name: webapp-pdb
        spec:
          selector:
            matchLabels:
              app: webapp
          maxUnavailable: 25%
          minAvailable: 1
          disruptionsAllowed: 1
          evictionBudget:
            maxPodGracefulTerminations: 1
            minAvailablePercentage: 100
            podTerminationGracePeriodSeconds: 600
            selector:
              matchLabels:
                app: webapp
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  type: LoadBalancer
  selector:
    app: webapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  # Add Service Availability
  # Create an external load balancer to distribute traffic
  # Add a health check to ensure the service is available
  # Configure a 5 second probe interval with a 10 second timeout
  # Set the maximum number of consecutive failures to 3
  # Mark a pod as unavailable if it fails the health check
  # Ensure at least one pod is available at all times
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
